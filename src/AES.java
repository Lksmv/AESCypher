import java.util.ArrayList;
import java.util.List;

public class AES {

    int[] constant = {1,2,4,8,16,32,64,128,27,54};
    String[][] sbox = {{"63","7c","77","7b","f2","6b","6f","c5","30","01","67","2b","fe","d7","ab","76"},
    {"ca","82","c9","7d","fa","59","47","f0","ad","d4","a2","af","9c","a4","72","c0"},
    {"b7","fd","93","26","36","3f","f7","cc","34","a5","e5","f1","71","d8","31","15"},
    {"04","c7","23","c3","18","96","05","9a","07","12","80","e2","eb","27","b2","75"},
    {"09","83","2c","1a","1b","6e","5a","a0","52","3b","d6","b3","29","e3","2f","84"},
    {"53","d1","00","ed","20","fc","b1","5b","6a","cb","be","39","4a","4c","58","cf"},
    {"d0","ef","aa","fb","43","4d","33","85","45","f9","02","7f","50","3c","9f","a8"},
    {"51","a3","40","8f","92","9d","38","f5","bc","b6","da","21","10","ff","f3","d2"},
    {"cd","0c","13","ec","5f","97","44","17","c4","a7","7e","3d","64","5d","19","73"},
    {"60","81","4f","dc","22","2a","90","88","46","ee","b8","14","de","5e","0b","db"},
    {"e0","32","3a","0a","49","06","24","5c","c2","d3","ac","62","91","95","e4","79"},
    {"e7","c8","37","6d","8d","d5","4e","a9","6c","56","f4","ea","65","7a","ae","08"},
    {"ba","78","25","2e","1c","a6","b4","c6","e8","dd","74","1f","4b","bd","8b","8a"},
    {"70","3e","b5","66","48","03","f6","0e","61","35","57","b9","86","c1","1d","9e"},
    {"e1","f8","98","11","69","d9","8e","94","9b","1e","87","e9","ce","55","28","df"},
    {"8c","a1","89","0d","bf","e6","42","68","41","99","2d","0f","b0","54","bb","16"}};

    int[][] tabelaE = {{0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35},
            {0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa},
            {0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31},
            {0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd},
            {0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88},
            {0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a},
            {0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3},
            {0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0},
            {0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41},
            {0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75},
            {0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80},
            {0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54},
            {0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca},
            {0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e},
            {0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17},
            {0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01}};

    int[][] tabelaL = {{0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03},
            {0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1},
            {0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78},
            {0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e},
            {0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38},
            {0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10},
            {0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba},
            {0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57},
            {0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8},
            {0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0},
            {0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7},
            {0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d},
            {0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1},
            {0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab},
            {0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5},
            {0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07}};

    int[] multiplicacao = {2,3,1,1,
            1,2,3,1,
            1,1,2,3,
            3,1,1,2};

    public int[] pegarPalavra(List<Integer> key, int c) {
        return new int[]{key.get(0 + c), key.get(4 + c), key.get(8 + c), key.get(12 + c)};
    }

    public int[] rotacionarPalavra(int[] word){
        return new int[]{word[1],word[2],word[3],word[0]};
    }

    public int[] substituirBytes(int[] word){
        String[] hex = new String[word.length];
        for(int i=0;i<word.length;i++){
            hex[i] = Integer.toHexString(word[i]);
        }
        int[] sub = new int[word.length];
        for(int i=0;i<word.length;i++){
            int a,b;
            if(hex[i].length()==2){
                a = Integer.parseInt((hex[i].charAt(0)+""),16);
                b = Integer.parseInt((hex[i].charAt(1)+""),16);
            }else{
                a = 0;
                b = Integer.parseInt((hex[i]),16);
            }
            sub[i] = Integer.parseInt(sbox[a][b],16);
        }
        return sub;
    }

    public int[] gerarRoundConstant(int i){
        return new int[]{constant[i-1],0,0,0};
    }

    public int[] xorEntre(int[] a,int[] b){
        int[] result =  new int[a.length];
        for(int i =0;i<a.length;i++){
            result[i] = a[i]^b[i];
        }
        return result;
    }

    public List<Integer> setarRoundKey(int[] a,int[] b,int[] c,int[] d){
        List<Integer> roundkey = new ArrayList<>();
        for(int x=0;x<4;x++){
            roundkey.add(a[x]);
            roundkey.add(b[x]);
            roundkey.add(c[x]);
            roundkey.add(d[x]);
        }
        return roundkey;
    }

    public int[] toVector(List<Integer> list){
        int[] vec = new int[list.size()];
        for(int i=0;i<list.size();i++){
            vec[i] = list.get(i);
        }
        return vec;
    }

    public int[] shiftRows(int[] key){
        int[] copy = key.clone();
        copy = new int[]{key[0],key[1],key[2],key[3],
                key[5],key[6],key[7],key[4],
                key[10],key[11],key[8],key[9],
                key[15],key[12],key[13],key[14]};
        return copy;
    }

    public int[] mixedColumns(int[] key){
        int[] mixed = new int[16];
        int[] linha = multiplicacaoGalois(new int[]{key[0],key[4],key[8],key[12]});
        int[] linha1 = multiplicacaoGalois(new int[]{key[1],key[5],key[9],key[13]});
        int[] linha2= multiplicacaoGalois(new int[]{key[2],key[6],key[10],key[14]});
        int[] linha3 = multiplicacaoGalois(new int[]{key[3],key[7],key[11],key[15]});

        return toVector(setarRoundKey(linha,linha1,linha2,linha3));
    }

    public int[] multiplicacaoGalois(int[] word){
        int[] newWord = new int[4];
        newWord[0] = galois(word[0],multiplicacao[0])^galois(word[1],multiplicacao[1])^galois(word[2],multiplicacao[2])^galois(word[3],multiplicacao[3]);
        newWord[1] = galois(word[0],multiplicacao[4])^galois(word[1],multiplicacao[5])^galois(word[2],multiplicacao[6])^galois(word[3],multiplicacao[7]);
        newWord[2] = galois(word[0],multiplicacao[8])^galois(word[1],multiplicacao[9])^galois(word[2],multiplicacao[10])^galois(word[3],multiplicacao[11]);
        newWord[3] = galois(word[0],multiplicacao[12])^galois(word[1],multiplicacao[13])^galois(word[2],multiplicacao[14])^galois(word[3],multiplicacao[15]);
        return newWord;
    }
    public int galois(int valor,int value){
        if (valor == 0){
            return 0;
        }
        if(value == 1){
            return valor;
        }else if(valor ==1){
            return value;
        }
        int r = buscarTabelaL(valor);
        int v = buscarTabelaL(value);
        int soma = r+v;
        if (soma>255){
            soma -= 255;
        }
        int t = buscarTabelaE(soma);
        return t;
    }
    public int buscarTabelaE(int valor){
        String hex = Integer.toHexString(valor);
        if(hex.length()==1){
            return tabelaE[0][Integer.parseInt(hex,16)];
        }else{
            return tabelaE[Integer.parseInt(String.valueOf(hex.charAt(0)),16)][Integer.parseInt(String.valueOf(hex.charAt(1)),16)];
        }
    }
    public int buscarTabelaL(int valor){
        String hex = Integer.toHexString(valor);
        if(hex.length()==1){
            return tabelaL[0][Integer.parseInt(hex,16)];
        }else{
            return tabelaL[Integer.parseInt(String.valueOf(hex.charAt(0)),16)][Integer.parseInt(String.valueOf(hex.charAt(1)),16)];
        }
    }


}
